{"version":3,"sources":["Views/Signup/Signup.js","FirebaseApp/index.js","Components/Button.js","Components/CustomTextField.js"],"names":["Signup","setUser","history","useHistory","useState","error","setError","useFormik","initialValues","email","password","confirmPassword","validationSchema","yup","shape","typeError","required","min","oneOf","onSubmit","vals","onSuccess","onError","console","log","db","firebase","database","auth","createUserWithEmailAndPassword","then","userCredential","user","ref","get","snap","val","update","admin","uid","isAdmin","catch","message","CreateAccount","push","er","values","errors","handleSubmit","handleChange","submitCount","useEffect","className","style","left","top","background","href","src","Logo","width","helperText","name","onChange","value","label","type","color","height","opacity","maxWidth","textAlign","cursor","onClick","initializeApp","config","useStyles","makeStyles","button","backgroundColor","_Button","props","classes","variant","size","fullWidth","root","borderColor","CustomTextField","rest","spellCheck","FormHelperTextProps","position","right","InputProps","InputLabelProps"],"mappings":"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","file":"static/js/13.7e95f008.chunk.js","sourcesContent":["import \"../../Styles/css/login.css\";\r\nimport Logo from \"Assets/images/logo/logo2r.png\";\r\nimport CustomTextField from \"Components/CustomTextField\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Button from \"Components/Button\";\r\nimport firebase from \"FirebaseApp\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst CreateAccount = ({ email, password, onSuccess, onError }) => {\r\n  console.log(email, password);\r\n  const db = firebase.database();\r\n  firebase\r\n    .auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n      // Signed in\r\n\r\n      var user = userCredential.user;\r\n\r\n      db.ref(\"admin\")\r\n        .get()\r\n        .then((snap) => {\r\n          if (!snap.val()) {\r\n            db.ref()\r\n              .update({ admin: user.uid })\r\n              .then(() => {\r\n                onSuccess({ ...user, isAdmin: true });\r\n              });\r\n          } else {\r\n            onSuccess(user);\r\n          }\r\n        });\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Eror\", error.message);\r\n      onError(error);\r\n    });\r\n};\r\n\r\nconst Signup = ({ setUser }) => {\r\n  const history = useHistory();\r\n  const [error, setError] = useState(null);\r\n  const { values, errors, handleSubmit, handleChange, submitCount } = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      email: yup.string().email().typeError(\"Wrong format\").required(\"Required\"),\r\n      password: yup.string().min(6, \"Minimum 6 characters\"),\r\n      confirmPassword: yup.string().oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\r\n    }),\r\n    onSubmit: (vals) => {\r\n      const onSuccess = (user) => {\r\n        setUser(user);\r\n        if (user.isAdmin) {\r\n          history.push(\"/admin\");\r\n        } else {\r\n          history.push(\"/\");\r\n        }\r\n      };\r\n      const onError = (er) => {\r\n        setError(er.message);\r\n      };\r\n      CreateAccount({ ...vals, onSuccess, onError });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    setError(null);\r\n  }, [submitCount]);\r\n\r\n  return (\r\n    <div\r\n      className=\"position-fixed w-100 h-100 d-flex overflow-auto p-4\"\r\n      style={{ left: 0, top: 0 }}\r\n    >\r\n      <div\r\n        className=\"position-absolute w-100 h-100 d-block d-sm-none\"\r\n        style={{ left: 0, top: 0, background: \"black\" }}\r\n      ></div>\r\n      <form onSubmit={handleSubmit} className=\"login-container p-5 m-auto position-relative\">\r\n        <div className=\"d-flex justify-content-center mb-5 pb-4\">\r\n          <a href=\"/\">\r\n            <img src={Logo} className=\"mx-auto\" width={198}></img>\r\n          </a>\r\n        </div>\r\n        <div className=\"px-sm-4\">\r\n          <div className=\"mb-4\">\r\n            <CustomTextField\r\n              error={submitCount > 0 && errors[\"email\"]}\r\n              helperText={errors[\"email\"]}\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              value={values.email}\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              color=\"white\"\r\n            ></CustomTextField>\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <CustomTextField\r\n              error={submitCount > 0 && errors[\"password\"]}\r\n              helperText={errors[\"password\"]}\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              color=\"white\"\r\n            ></CustomTextField>\r\n          </div>\r\n          <div>\r\n            <CustomTextField\r\n              error={submitCount > 0 && errors[\"confirmPassword\"]}\r\n              helperText={errors[\"confirmPassword\"]}\r\n              value={values.confirmPassword}\r\n              onChange={handleChange}\r\n              name=\"confirmPassword\"\r\n              label=\"Confirm password\"\r\n              type=\"password\"\r\n              color=\"white\"\r\n            ></CustomTextField>\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{ height: 75, opacity: error ? 1 : 0 }}\r\n          className=\"d-flex align-items-end text-danger p-4\"\r\n        >\r\n          {error}\r\n        </div>\r\n        <div className=\"d-flex justify-content-center mb-3\">\r\n          <div style={{ maxWidth: 230, width: \"100%\" }}>\r\n            <Button type=\"submit\">Sign Up</Button>\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{ color: \"white\", textAlign: \"center\", cursor: \"pointer\" }}\r\n          onClick={() => history.push(\"/login\")}\r\n        >\r\n          Login\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import firebase from \"firebase\";\r\nimport config from \"./config.json\";\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  button: {\r\n    background: \"#ffbd1b\",\r\n    color: \"#fff\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#DAA520\",\r\n      color: \"#FFF\",\r\n    },\r\n  },\r\n});\r\n\r\nconst _Button = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      className={classes.button}\r\n      size={props.size ? props.size : \"large\"}\r\n      fullWidth\r\n      {...props}\r\n    ></Button>\r\n  );\r\n};\r\n\r\nexport default _Button;\r\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    \"& .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#ffbd1b\",\n    },\n    \"&:hover .MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#ffbd1b\",\n    },\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"#ffbd1b\",\n    },\n    \"& .MuiInputLabel-outlined.Mui-focused\": {\n      color: (props) => props.color,\n    },\n  },\n});\n\nconst CustomTextField = ({ label, value, onChange, color = \"black\", ...rest }) => {\n  const classes = useStyles({ color });\n  return (\n    <TextField\n      {...rest}\n      spellCheck={false}\n      variant=\"outlined\"\n      label={label}\n      fullWidth\n      className={classes.root}\n      FormHelperTextProps={{\n        style: {\n          position: \"absolute\",\n          right: 0,\n        },\n      }}\n      InputProps={{\n        style: {\n          color,\n        },\n      }}\n      InputLabelProps={{\n        style: { color },\n      }}\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default CustomTextField;\n"],"sourceRoot":""}